


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             text, CODE, READONLY
    2 00000000                 EXPORT           Example_asm
    3 00000000                 EXPORT           ams_math
    4 00000000         
    5 00000000         ; function Example_asm
    6 00000000         ; inputs:
    7 00000000         ; -------
    8 00000000         ; R0: input
    9 00000000         
   10 00000000         
   11 00000000         Example_asm
   12 00000000         
   13 00000000 4606            MOV              R6, R0
   14 00000002 4770            BX               LR
   15 00000004         
   16 00000004         ;END
   17 00000004         
   18 00000004         ams_math
   19 00000004         ; R0 holds input pointer
   20 00000004         ; R1 holds loop counter or output pointer
   21 00000004         ; R2 holds index of min value
   22 00000004         ; R3 holds index of max value
   23 00000004         ; R12 holds input length
   24 00000004         ; S0 holds progress of RMS
   25 00000004 B912            CBNZ             R2, fn      ; Check if length i
                                                            s 0
   26 00000006 F04F 30FF       MOV              R0, #-1     ; Store only 0's in
                                                             output
   27 0000000A 4770            BX               r14
   28 0000000C B402    fn      PUSH             {R1}        ; put output pointe
                                                            r on stack because 
                                                            it isn't needed for
                                                             now
   29 0000000E F04F 0100       MOV              R1, #0      ; initialize loop c
                                                            ounter to 0
   30 00000012 EA4F 0282       LSL              R2, #2      ; multiply length b
                                                            y 4 for alignment
   31 00000016 4694            MOV              R12, R2     ; move input length
                                                             to R12
   32 00000018 460A            MOV              R2, R1      ; initialize min in
                                                            dex to 0
   33 0000001A 460B            MOV              R3, R1      ; initialize max in
                                                            dex to 0
   34 0000001C E005            B                start       ; skip loop label, 
                                                            don't increment cou
                                                            nter before first i
                                                            teration
   35 0000001E F101 0104 
                       loop    ADD              R1, R1, #4  ; increment counter
                                                             before the next it
                                                            eration
   36 00000022 ECBD 0A01       VPOP             {S0}
   37 00000026 F85D CB04       POP              {R12}       ; retrieve input le
                                                            ngth from stack
   38 0000002A 4561    start   CMP              R1, R12     ; check if final it
                                                            eration has complet
                                                            ed
   39 0000002C D01F            BEQ              calc
   40 0000002E F84D CD04       PUSH             {R12}       ; input length no l



ARM Macro Assembler    Page 2 


                                                            onger needed in loo
                                                            p iteration, put it
                                                             on stack
   41 00000032 EB00 0C01       ADD              R12, R0, R1 ; calculate address
                                                             of next item for V
                                                            LDR
   42 00000036 EDDC 0A00       VLDR.32          S1, [R12]   ; next item goes in
                                                             S1
   43 0000003A EEA0 0AA0       VFMA.F32         S0, S1, S1  ; increment S0 by (
                                                            next item)^2
   44 0000003E ED2D 0A01       VPUSH            {S0}
   45 00000042 EB00 0C02       ADD              R12, R0, R2 ; calculate address
                                                             of current min for
                                                             VLDR
   46 00000046 ED9C 0A00       VLDR.32          S0, [R12]   ; current min goes 
                                                            in S1
   47 0000004A EEF4 0A40       VCMP.F32         S1, S0      ; compare current i
                                                            tem to current min
   48 0000004E EEF1 FA10       VMRS             APSR_nzcv, FPSCR ; send compari
                                                            son results to core
                                                            
   49 00000052 DB0A            BLT              min         ; if new min is see
                                                            n, branch...
   50 00000054 EB00 0C03       ADD              R12, R0, R3 ; ... else calculat
                                                            e address of curren
                                                            t max for VLDR
   51 00000058 ED9C 0A00       VLDR.32          S0, [R12]   ; current max goes 
                                                            in S1
   52 0000005C EEF4 0A40       VCMP.F32         S1, S0      ; compare current i
                                                            tem to current max
   53 00000060 EEF1 FA10       VMRS             APSR_nzcv, FPSCR ; send compari
                                                            son results to core
                                                            
   54 00000064 DBDB            BLT              loop        ; if not min or max
                                                            , go to next iterat
                                                            ion...
   55 00000066 460B    max     MOV              R3, R1      ; ... else, it's a 
                                                            max, so put current
                                                             index in R4
   56 00000068 E7D9            B                loop
   57 0000006A 460A    min     MOV              R2, R1      ; it's a min, put c
                                                            urrent index in R3
   58 0000006C E7D7            B                loop
   59 0000006E EA4F 0C9C 
                       calc    LSR              R12, #2     ; restore R2 to ori
                                                            ginal value by divi
                                                            ding by 4
   60 00000072 BC02            POP              {R1}
   61 00000074 EE00 CA90       VMOV             S1, R12     ; put length in flo
                                                            ating point registe
                                                            r
   62 00000078 EEF8 0A60       VCVT.F32.U32     S1, S1      ; tell S1 to interp
                                                            ret data as int
   63 0000007C EE80 0A20       VDIV.F32         S0, S0, S1  ; divide sum of squ
                                                            ares by length (mea
                                                            n square)
   64 00000080 EEB1 0AC0       VSQRT.F32        S0, S0      ; get RMS
   65 00000084 ED81 0A00       VSTR.32          S0, [R1]    ; store RMS in firs
                                                            t cell of output



ARM Macro Assembler    Page 3 


   66 00000088 EB00 0C03       ADD              R12, R0, R3 ; calculate address
                                                             of max value
   67 0000008C ED9C 0A00       VLDR.32          S0, [R12]
   68 00000090 ED81 0A01       VSTR.32          S0, [R1, #4] ; store max value 
                                                            in second cell of o
                                                            utput
   69 00000094 EB00 0C02       ADD              R12, R0, R2 ; calculate address
                                                             of min value
   70 00000098 ED9C 0A00       VLDR.32          S0, [R12]
   71 0000009C ED81 0A02       VSTR.32          S0, [R1, #8] ; store min value 
                                                            in third cell of ou
                                                            tput
   72 000000A0 EA4F 0393       LSR              R3, #2      ; convert max index
                                                             to bytes
   73 000000A4 EA4F 0292       LSR              R2, #2      ; convert min index
                                                             to bytes
   74 000000A8 EE00 3A10       VMOV             S0, R3      ; move max index to
                                                             floating point reg
                                                            ister
   75 000000AC EEB8 0A40       VCVT.F32.U32     S0, S0      ; tell S0 to interp
                                                            ret data as integer
                                                            
   76 000000B0 ED81 0A03       VSTR.32          S0, [R1, #12] ; store max index
                                                             in fourth cell of 
                                                            output
   77 000000B4 EE00 2A10       VMOV             S0, R2      ; move min index to
                                                             S0
   78 000000B8 EEB8 0A40       VCVT.F32.U32     S0, S0      ; tell S0 to interp
                                                            ret data as integer
                                                            
   79 000000BC ED81 0A04       VSTR.32          S0, [R1, #16] ; store min index
                                                             in fifth cell of o
                                                            utput
   80 000000C0 4770            BX               r14
   81 000000C2         
   82 000000C2         END
                       
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\assembly.d -o.\objects\assembly.o -I.\RTE\_Target_1 -
IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\S
TM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --predefine="__EV
AL SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="_RTE_ SETA 1" 
--predefine="STM32F407xx SETA 1" --list=.\listings\assembly.lst Assembly.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

END 000000C2

Symbol: END
   Definitions
      At line 82 in file Assembly.s
   Uses
      None
Comment: END unused
Example_asm 00000000

Symbol: Example_asm
   Definitions
      At line 11 in file Assembly.s
   Uses
      At line 2 in file Assembly.s
Comment: Example_asm used once
ams_math 00000004

Symbol: ams_math
   Definitions
      At line 18 in file Assembly.s
   Uses
      At line 3 in file Assembly.s
Comment: ams_math used once
calc 0000006E

Symbol: calc
   Definitions
      At line 59 in file Assembly.s
   Uses
      At line 39 in file Assembly.s
Comment: calc used once
fn 0000000C

Symbol: fn
   Definitions
      At line 28 in file Assembly.s
   Uses
      At line 25 in file Assembly.s
Comment: fn used once
loop 0000001E

Symbol: loop
   Definitions
      At line 35 in file Assembly.s
   Uses
      At line 54 in file Assembly.s
      At line 56 in file Assembly.s
      At line 58 in file Assembly.s

max 00000066

Symbol: max
   Definitions
      At line 55 in file Assembly.s
   Uses
      None
Comment: max unused
min 0000006A



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: min
   Definitions
      At line 57 in file Assembly.s
   Uses
      At line 49 in file Assembly.s
Comment: min used once
start 0000002A

Symbol: start
   Definitions
      At line 38 in file Assembly.s
   Uses
      At line 34 in file Assembly.s
Comment: start used once
text 00000000

Symbol: text
   Definitions
      At line 1 in file Assembly.s
   Uses
      None
Comment: text unused
10 symbols
345 symbols in table
