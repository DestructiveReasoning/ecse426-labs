


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             text, CODE, READONLY
    2 00000000                 EXPORT           Example_asm
    3 00000000                 EXPORT           ams_math
    4 00000000         
    5 00000000         ; function Example_asm
    6 00000000         ; inputs:
    7 00000000         ; -------
    8 00000000         ; R0: input
    9 00000000         
   10 00000000         
   11 00000000         Example_asm
   12 00000000         
   13 00000000 4606            MOV              R6, R0
   14 00000002 4770            BX               LR
   15 00000004         
   16 00000004         ;END
   17 00000004         
   18 00000004         ams_math
   19 00000004         ; R0 holds input pointer
   20 00000004         ; R1 holds loop counter and output pointer
   21 00000004         ; R2 holds input length
   22 00000004         ; R3 holds current min index
   23 00000004         ; R4 holds current max index
   24 00000004         ; S0 holds progress of RMS
   25 00000004         ; S1 holds current array item
   26 00000004         ; S2 holds current min
   27 00000004         ; S3 holds current max
   28 00000004 B912            CBNZ             R2, fn      ; Check if length i
                                                            s 0
   29 00000006 F04F 30FF       MOV              R0, #-1     ; Store only 0's in
                                                             output
   30 0000000A 4770            BX               r14
   31 0000000C F84D 4C04 
                       fn      STR              R4, [SP, #-4] 
                                                            ; preserve R4 value
                                                            
   32 00000010 F84D 1C08       STR              R1, [SP, #-8] ; preserve output
                                                             pointer
   33 00000014 F04F 0100       MOV              R1, #0      ; loop counter
   34 00000018 460B            MOV              R3, R1      ; initialize min in
                                                            dex to 0
   35 0000001A 460C            MOV              R4, R1      ; initialize max in
                                                            dex to 0
   36 0000001C EE00 1A10       VMOV             S0, R1      ; initialize RMS to
                                                             0
   37 00000020 EDD0 0A00       VLDR.32          S1, [R0]    ; current item
   38 00000024 EEB0 1A60       VMOV.F32         S2, S1      ; current min and m
                                                            ax default to first
                                                             value
   39 00000028 EEF0 1A60       VMOV.F32         S3, S1
   40 0000002C EA4F 0282       LSL              R2, #2      ; multiply length b
                                                            y 4 for alignment
   41 00000030 EEA0 0AA0       VFMA.F32         S0, S1, S1
   42 00000034 F101 0104 
                       loop    ADD              R1, R1, #4  ; increment counter
                                                             before the next it
                                                            eration
   43 00000038 4291            CMP              R1, R2      ; check if final it
                                                            eration has complet



ARM Macro Assembler    Page 2 


                                                            ed
   44 0000003A D017            BEQ              calc
   45 0000003C F100 0004       ADD              R0, R0, #4
   46 00000040 EDD0 0A00       VLDR.32          S1, [R0]    ; next item goes in
                                                             S2
   47 00000044 EEA0 0AA0       VFMA.F32         S0, S1, S1  ; increment S0 by (
                                                            next item)^2
   48 00000048 EEF4 0A41       VCMP.F32         S1, S2      ; compare current i
                                                            tem to current min
   49 0000004C EEF1 FA10       VMRS             APSR_nzcv, FPSCR ; send compari
                                                            son results to core
                                                            
   50 00000050 DB08            BLT              min         ; if new min is see
                                                            n, branch...
   51 00000052 EEF4 0A61       VCMP.F32         S1, S3      ; compare current i
                                                            tem to current max
   52 00000056 EEF1 FA10       VMRS             APSR_nzcv, FPSCR ; send compari
                                                            son results to core
                                                            
   53 0000005A DBEB            BLT              loop        ; if not min or max
                                                            , go to next iterat
                                                            ion...
   54 0000005C 460C    max     MOV              R4, R1      ; ... else, it's a 
                                                            max, so put current
                                                             index in R4
   55 0000005E EEF0 1A60       VMOV.F32         S3, S1
   56 00000062 E7E7            B                loop
   57 00000064 460B    min     MOV              R3, R1      ; it's a min, put c
                                                            urrent index in R3
   58 00000066 EEB0 1A60       VMOV.F32         S2, S1
   59 0000006A E7E3            B                loop
   60 0000006C EA4F 0292 
                       calc    LSR              R2, #2      ; restore R2 to ori
                                                            ginal value by divi
                                                            ding by 4
   61 00000070 F85D 1C08       LDR              R1, [SP, #-8] ; restore output 
                                                            pointer to R1
   62 00000074 EE00 2A90       VMOV             S1, R2      ; put length in flo
                                                            ating point registe
                                                            r
   63 00000078 EEF8 0A60       VCVT.F32.U32     S1, S1      ; tell S1 to interp
                                                            ret data as int
   64 0000007C EE80 0A20       VDIV.F32         S0, S0, S1  ; divide sum of squ
                                                            ares by length (mea
                                                            n square)
   65 00000080 EEB1 0AC0       VSQRT.F32        S0, S0      ; get RMS
   66 00000084 ED81 0A00       VSTR.32          S0, [R1]    ; store RMS in firs
                                                            t cell of output
   67 00000088 EDC1 1A01       VSTR.32          S3, [R1, #4] ; store max value 
                                                            in second cell of o
                                                            utput
   68 0000008C ED81 1A02       VSTR.32          S2, [R1, #8] ; store min value 
                                                            in third cell of ou
                                                            tput
   69 00000090 EA4F 0494       LSR              R4, #2      ; convert max index
                                                             to bytes
   70 00000094 EA4F 0393       LSR              R3, #2      ; convert min index
                                                             to bytes
   71 00000098 EE00 4A10       VMOV             S0, R4      ; move max index to



ARM Macro Assembler    Page 3 


                                                             floating point reg
                                                            ister
   72 0000009C EEB8 0A40       VCVT.F32.U32     S0, S0      ; tell S0 to interp
                                                            ret data as integer
                                                            
   73 000000A0 ED81 0A03       VSTR.32          S0, [R1, #12] ; store max index
                                                             in fourth cell of 
                                                            output
   74 000000A4 EE00 3A10       VMOV             S0, R3      ; move min index to
                                                             S0
   75 000000A8 EEB8 0A40       VCVT.F32.U32     S0, S0      ; tell S0 to interp
                                                            ret data as integer
                                                            
   76 000000AC ED81 0A04       VSTR.32          S0, [R1, #16] ; store min index
                                                             in fifth cell of o
                                                            utput
   77 000000B0 F85D 4C04       LDR              R4, [SP, #-4] ; restore R4's va
                                                            lue from previous c
                                                            ontext
   78 000000B4 4770            BX               r14
   79 000000B6         
   80 000000B6         END
                       
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\assembly.d -o.\objects\assembly.o -I.\RTE\_Target_1 -
IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\S
TM32F4xx_DFP\2.11.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include --predefine="__EV
AL SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="_RTE_ SETA 1" 
--predefine="STM32F407xx SETA 1" --list=.\listings\assembly.lst Assembly.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

END 000000B6

Symbol: END
   Definitions
      At line 80 in file Assembly.s
   Uses
      None
Comment: END unused
Example_asm 00000000

Symbol: Example_asm
   Definitions
      At line 11 in file Assembly.s
   Uses
      At line 2 in file Assembly.s
Comment: Example_asm used once
ams_math 00000004

Symbol: ams_math
   Definitions
      At line 18 in file Assembly.s
   Uses
      At line 3 in file Assembly.s
Comment: ams_math used once
calc 0000006C

Symbol: calc
   Definitions
      At line 60 in file Assembly.s
   Uses
      At line 44 in file Assembly.s
Comment: calc used once
fn 0000000C

Symbol: fn
   Definitions
      At line 31 in file Assembly.s
   Uses
      At line 28 in file Assembly.s
Comment: fn used once
loop 00000034

Symbol: loop
   Definitions
      At line 42 in file Assembly.s
   Uses
      At line 53 in file Assembly.s
      At line 56 in file Assembly.s
      At line 59 in file Assembly.s

max 0000005C

Symbol: max
   Definitions
      At line 54 in file Assembly.s
   Uses
      None
Comment: max unused
min 00000064



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols


Symbol: min
   Definitions
      At line 57 in file Assembly.s
   Uses
      At line 50 in file Assembly.s
Comment: min used once
text 00000000

Symbol: text
   Definitions
      At line 1 in file Assembly.s
   Uses
      None
Comment: text unused
9 symbols
344 symbols in table
